// src\routes\api\post\+server.js
import { postQueue } from '$lib/server/queue';  // import queue ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
import { json } from '@sveltejs/kit';
import { Post } from '$lib/server/models/Post';
import { authUser } from '$lib/server/auth';
import { uploadImage } from '$lib/server/upload';

/** @type {import('./$types').RequestHandler} */
export async function POST({ request }) {
	try {
		const user = await authUser(request);
		if (!user) {
			console.warn('üõë ‡πÑ‡∏°‡πà‡∏°‡∏µ user');
			return new Response('Unauthorized', { status: 401 });
		}

		// ‡∏•‡∏ö flag ‡∏´‡∏¢‡∏∏‡∏î (‡∏´‡∏£‡∏∑‡∏≠ set ‡πÄ‡∏õ‡πá‡∏ô false) ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
    await connection.del(`stop:${user._id.toString()}`);

    const formData = await request.formData();
		const content = formData.get('content');
		const duration = formData.get('duration');
		const image = formData.get('image');

    let imageUrl = '';
		if (image && image.size > 0) {
			imageUrl = await uploadImage(image);
			console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß imageUrl =', imageUrl);
		}

		console.log('üì® content:', content);
		console.log('‚è± duration:', duration);
		console.log('üñº image name:', image?.name);

		let post;

		const existingPost = await Post.findOne({ userId: user._id });
		if (existingPost) {
      console.log('‚ö†Ô∏è ‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Ñ‡∏¢‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏î‡∏¥‡∏°');

      if (image && image.size > 0) {
        imageUrl = await uploadImage(image);
      } else {
        imageUrl = ''; 
      }
      
      existingPost.content = content;
      existingPost.duration = duration;
      existingPost.imageUrl = imageUrl;
      existingPost.status = 'posted';
      existingPost.updatedAt = new Date();
      
      post = await existingPost.save();

    } else {
		  post = await Post.create({
				userId: user._id,           // ObjectId ‡∏Ç‡∏≠‡∏á user
				content: content,           // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå (string) ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
				duration: duration || 0,    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏≤‡∏ó‡∏µ (number) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
				imageUrl: imageUrl || '',   // URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (string) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
				// lastPostedAt ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (default ‡πÄ‡∏õ‡πá‡∏ô null)
				// createdAt ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ mongoose ‡∏à‡∏∞‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
		  });
		}

		console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', post);

    // **‡∏™‡πà‡∏á job ‡πÄ‡∏Ç‡πâ‡∏≤ queue ‡πÉ‡∏´‡πâ Worker ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡πà‡∏≠**
    await postQueue.add('post-job', {
			userId: user._id.toString(),
			postId: post._id.toString() // ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà _id ‡πÑ‡∏õ
		}, {
			delay: (post.duration || 0) * 60 * 1000, // ‚ùó ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô "‡∏ô‡∏≤‡∏ó‡∏µ" ‡πÄ‡∏õ‡πá‡∏ô "‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
			attempts: 3, // ‚úÖ (Optional) retry 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡πâ‡∏≤ fail
			backoff: 10000, // ‚úÖ (Optional) ‡∏£‡∏≠ 10 ‡∏ß‡∏¥ ‡∏Å‡πà‡∏≠‡∏ô retry
			removeOnComplete: false, // ‚ùå ‡πÑ‡∏°‡πà‡∏•‡∏ö job ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  		removeOnFail: false      // ‚ùå ‡πÑ‡∏°‡πà‡∏•‡∏ö job ‡∏´‡∏•‡∏±‡∏á fail
		});

		return json(post);

	} catch (error) {
		console.error('üö® POST /api/post ERROR:', error);
		return new Response(
			JSON.stringify({ message: 'Internal Error', error: error.message }),
			{ status: 500, headers: { 'Content-Type': 'application/json' } }
		);
	}
}
